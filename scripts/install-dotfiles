#!/usr/bin/env bash
#
# Takes no arguments, copies over every git-tracked file in the git repo
# the home directory, creating the necessary parent directories if needed.
#
# This is a very dangerous script so be careful with it.
#
######################################################################
#                              WARNING!                              #
######################################################################
#                                                                    #
#      This script will replace many of the files in your home       #
#    directory! This script takes all the files tracked by git in    #
#          the ~/dotfiles directory and copies them to ~/.           #
#                                                                    #
#   This includes important files such as .bashrc and .Xresources.   #
#                            BE PREPARED!                            #
#                                                                    #
######################################################################

red=$'\e[1;31m'
green=$'\e[1;32m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
magenta=$'\e[1;35m'
cyan=$'\e[1;36m'
end=$'\e[0m'

# Stores the full, absolute path to the directory this script is in. This is
# used to call "sibling" scripts this script expects to be in the same
# directory.
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
# Functional alternative, but realpath may not be installed on all systems
# SCRIPT_DIR="$(dirname "$(realpath "$0")")"

printf " ╔══════════════════════════════════════════════════════╗\n"
printf " ║                 2. Copy Over Dotfiles                ║\n"
printf " ╚══════════════════════════════════════════════════════╝\n"

# This script is used to "install" all the parts of the setup.

fontdir=/usr/share/fonts
MANUALINS=(font-awesome* otf-hermit*)
IGNORELIST=(\\.git README.md LICENSE)
# The absolute path for the root level directory for the git repo
# we are currently in. Strip the final "/" if there is one. There
# shouldn't be, but its possible future versions of git will print
# directories with a "/" at the end.
git_repo_root=$(git rev-parse --show-toplevel | sed "s/\/$//")

get_ignore_list () {
	ignoregrep=""
	# Creates a string used in a grep statement to retrieve only
	# the files NOT in MANUALINS and IGNORELIST
	for ignore in ${IGNORELIST[*]}; do
		ignoregrep=${ignoregrep}"\($ignore\)\|"
	done
	for ignore in ${MANUALINS[*]}; do
		ignoregrep=${ignoregrep}"\($ignore\)\|"
	done
	# Remove trailing "\|"
	ignoregrep=$(echo $ignoregrep | sed "s/.\{2\}$//")
}


copy_files () {
	# The following 'mapfile' command puts the output of the command wrapped
	# in parentheses in an array 'git_files' which contains the relative
	# file paths (from the git repo root) for all the git files and
	# directories we want to copy.
	mapfile -t git_files < <(cd $git_repo_root; git ls-files | grep -v "$ignoregrep" )

	# Populate 'git_files_fullpath' with the absolute paths to all the git
	# files we wish to copy.
	git_files_fullpath=()
	for file in ${git_files[@]}; do
		git_files_fullpath+=("${git_repo_root}/${file}")
	done

	for i in "${!git_files[@]}"; do
		# If the current file path includes a directory
		if [[ $(echo "${git_files[$i]}" | grep "\/") ]]; then
			# Create the parent directory for the file in the user's home directory
			# [^\/] matches any char that is NOT "/"
			git_file_parent_dir=$(echo "${git_files[$i]}" | sed "s/\/[^\/]*$//")
			mkdir -p ~/$git_file_parent_dir;
		fi
		# Copy file from git directory, and modify its ownership to the current user
		cp -Rv ${git_files_fullpath[$i]} ~/${git_files[$i]}
		chown $USER ~/${git_files[$i]}
	done
}

echo -n "Are you sure you would like to install your dotfiles to your home directory? [Y/n] (enter=Y): "
read -a ANSWER
printf "\n"

# If the user is sure they want to copy over the dotfiles from the dotfiles git repo to their home folder
if [[ ${ANSWER[*]} == "Y" || ${ANSWER[*]} == "" ]]; then
	get_ignore_list
	copy_files

	printf "\n"
	printf "Attempted to install the dotfiles.\n\n"
else
	printf "\n"
	printf "User chose not to install the dotfiles. Exiting...\n"
fi
