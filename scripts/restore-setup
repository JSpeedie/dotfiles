#!/usr/bin/env bash
#
# Takes no arguments. This is the primary script used for restoring my Linux
# setup. One calls this script which prompts the user and runs the correct
# helper scripts in order to restore my setup as simply as possible.

red=$'\e[1;31m'
green=$'\e[1;32m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
magenta=$'\e[1;35m'
cyan=$'\e[1;36m'
end=$'\e[0m'
bold=$(tput bold)
normal=$(tput sgr0) 

distros=("Arch" "Linux Mint")
distro_scripts=("install-packages-arch" "install-packages-mint")

# Stores the full, absolute path to the directory this script is in. This is
# used to call "sibling" scripts this script expects to be in the same
# directory.
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
# Functional alternative, but realpath may(???) not be installed on all systems
# SCRIPT_DIR="$(dirname "$(realpath "$0")")"

clear
printf "$bold"
printf " ╔══════════════════════════════════════════════════════╗\n"
printf " ║               SETUP RESTORATION SCRIPT               ║\n"
printf " ╚══════════════════════════════════════════════════════╝\n"
printf "$normal"
printf " ┏━━━━━━━━━━━━━┓   ┌──────────────┐   ┌─────────────────┐\n"
printf " ┃ 1. Install  ┃ ╲ │ 2. Copy Over │ ╲ │ 3. Configure    │\n"
printf " ┃    Packages ┃ ╱ │    Dotfiles  │ ╱ │    Installation │\n"
printf " ┗━━━━━━━━━━━━━┛   └──────────────┘   └─────────────────┘\n"
printf "$end\n"
echo


# {{{
echo -n "Would you like to install the packages from my package lists? [Y/n] (enter=Y): "
read -a ANSWER
printf "\n\n"

graceful_exit () {
	tput cnorm
	exit 1
}

paint_distro_selection () {
	tput sc    # Save cursor position
	tput civis # Make the cursor invisible
	selected=$1
	for i in ${!distros[@]}; do
		if [[ "$i" -eq "$selected" ]]; then
			tput rev   # Invert text foreground and background color
			tput bold   # Make text bold
			printf " %-56s" "${distros[$i]}"
			printf "\n"
			tput sgr0  # Reset text to default colors
		else
			printf " %-56s" "${distros[$i]}"
			printf "\n"
		fi
	done
}

unpaint_distro_selection () {
	tput rc    # Restore the cursor position
	for i in ${!distros[@]}; do
		tput el    # Clear the line from the cursor to the end of the line
		tput cud1  # Move the cursor down one line
	done
	tput rc    # Restore the cursor position
}

trap graceful_exit SIGINT
trap graceful_exit SIGTERM

# If the user wants to install the packages
if [[ ${ANSWER[*]} == "Y" || ${ANSWER[*]} == "" ]]; then
	printf "Which distro are you restoring your setup on? [Select and press enter]:\n"
	selection_index=0
	paint_distro_selection $selection_index

	# Loop, reading the user input until they select one of the distro
	# options
	while true; do
		# If the last character read was not the beginning of an array key byte
		# sequence
		if [[ "${INPUT}" != "" ]]; then
			read -rsn 1 INPUT
		fi
		if [[ "${INPUT}" == "" ]]; then
			read -sn 1 INPUT
			if [[ "${INPUT}" == "[" ]]; then
				read -sn 1 INPUT
				# If the down arrow was pressed
				if [[ "${INPUT}" == "B" ]]; then
					if [[ "$selection_index" -lt `expr ${#distros[@]} - 1` ]]; then
						selection_index=$(expr $selection_index + 1)
						unpaint_distro_selection
						paint_distro_selection $selection_index
					fi
				fi
				# If the up arrow was pressed
				if [[ "${INPUT}" == "A" ]]; then
					if [[ "$selection_index" -gt "0" ]]; then
						selection_index=$(expr $selection_index - 1)
						unpaint_distro_selection
						paint_distro_selection $selection_index
					fi
				fi
			fi
		# If the user selected a distro
		elif [[ "${INPUT}" == "" ]]; then
			break
		fi
	done

	printf "\n"
	tput cnorm
	${SCRIPT_DIR}/${distro_scripts[$selection_index]}
	printf "\n"
else
	printf "\n"
	printf "Skipping over installing packages.\n\n"
fi
# }}}


printf "$bold"
printf " ╔══════════════════════════════════════════════════════╗\n"
printf " ║               SETUP RESTORATION SCRIPT               ║\n"
printf " ╚══════════════════════════════════════════════════════╝\n"
printf "$normal"
printf " ┌─────────────┐   ┏━━━━━━━━━━━━━━┓   ┌─────────────────┐\n"
printf " │ 1. Install  │ ╲ ┃ 2. Copy over ┃ ╲ │ 3. Configure    │\n"
printf " │    Packages │ ╱ ┃    dotfiles  ┃ ╱ │    installation │\n"
printf " └─────────────┘   ┗━━━━━━━━━━━━━━┛   └─────────────────┘\n"
printf "$end\n"
echo


# "Installing" the dotfiles in the home directory
# {{{
echo -n "Would you like to copy your dotfiles to your home directory? [Y/n] (enter=Y): "
read -a ANSWER
printf "\n"

# If the user wants to copy over the dotfiles from the dotfiles git repo to their home folder
if [[ ${ANSWER[*]} == "Y" || ${ANSWER[*]} == "" ]]; then
	${SCRIPT_DIR}/install-dotfiles
	printf "\n"
else
	printf "\n"
	printf "Skipping over copying the dotfiles into the home directory.\n\n"
fi
# }}}


printf "$bold"
printf " ╔══════════════════════════════════════════════════════╗\n"
printf " ║               SETUP RESTORATION SCRIPT               ║\n"
printf " ╚══════════════════════════════════════════════════════╝\n"
printf "$normal"
printf " ┌─────────────┐   ┌──────────────┐   ┏━━━━━━━━━━━━━━━━━┓\n"
printf " │ 1. Install  │ ╲ │ 2. Copy over │ ╲ ┃ 3. Configure    ┃\n"
printf " │    Packages │ ╱ │    dotfiles  │ ╱ ┃    installation ┃\n"
printf " └─────────────┘   └──────────────┘   ┗━━━━━━━━━━━━━━━━━┛\n"
printf "$end\n"
echo


# Configuring the restored setup
# {{{
echo -n "Would you like to configure your setup? [Y/n] (enter=Y): "
read -a ANSWER
printf "\n"

# If the user wants configure their setup
if [[ ${ANSWER[*]} == "Y" || ${ANSWER[*]} == "" ]]; then
	${SCRIPT_DIR}/configure-setup
	printf "\n"
else
	printf "\n"
	printf "Skipping over configuring the setup.\n\n"
fi
# }}}
