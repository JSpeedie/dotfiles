#!/usr/bin/env bash

# Takes no arguments and outputs an `xrandr` command for configuring my
# monitors such that the highest resolution monitor is to the right of the
# lower resolution monitor. Currently, I've only tested this script when I have
# exactly 2 monitors plugged in. In the future (time of writing: 2025-06-24)
# I'd like to switch to some other method for configuring my monitors. Perhaps
# some standalone GUI tool where I can drag and drop them once after installing
# a new OS or getting a new monitor or something and then forget about it.
#
# EXAMPLES:
#
#   ./getxrandr
#   xrandr --output DP-0 --mode 1920x1080 --rate 144.00 --left-of DP-2 --output DP-2 --mode 2560x1440 --rate 59.95 --primary
#
#
# Notes:
#
# sort -rn
# Sort as numbers (as opposed to as strings), and reverse the order so the
# number appears first
#
# sed "1p;d"
# go to line 1, print; quit/exit. Fast version of head -n 1??
#
# grep " connected" -A 1
# Print 1 line after the line that matches " connected"
#
# sed -n "/$outputs/,/^\S/{//!p}"
# Get all the lines exclusively between the first pattern ($outputs) and
# the second (^\S). \S is any NON-whitespace.
#
# grep -o "^DP.\?[0-9]"
# \? means [0-9] is optional

logfile="getxrandr.out"

mapfile -t outputs < <(xrandr | grep -o "^.* connected" | sed "s/ connected//g")
echo "[$(date '+%F %T.%N')] outputs=\"${outputs[@]}\"" >> $logfile
# TODO: if an output is marked as primary, it will not be caught by this command
# and will not appear in $resolutions
mapfile -t resolutions < <(xrandr | grep -o "^.* connected [0-9]\+x[0-9]\+" | sed "s/^.* connected //g")
echo "[$(date '+%F %T.%N')] resolutions=\"${resolutions[@]}\"" >> $logfile

let highest_res_monitor_index="0"
let num_pixels="0"
for i in ${!resolutions[@]}; do
	if [[ "$num_pixels" -lt $(echo "${resolutions[$i]}" | sed "s/x/ * /g" | bc) ]]; then
		let highest_res_monitor_index="$i"
	fi
done
echo "[$(date '+%F %T.%N')] highest_res_monitor_index=\"$highest_res_monitor_index\"" >> $logfile

primary_outp=$(echo "${outputs[$highest_res_monitor_index]}")

final_out="xrandr "

# For each monitor:
for outp in ${outputs[@]}; do
	# 0. Get a string of all its options that we will reuse
	# TODO: how does this `sed` command work??
	monitoroptions=$(xrandr | sed -n "/$outp/,/^\S/{//!p}")
	# 1. Find its highest resolution (assumption: it's the
	# first one (top most) in the list produced by the xrandr command)
	resolution=$(printf "$monitoroptions\n" | sed "1p;d" \
		| grep -o "[0-9]\+x[0-9]\+")
	# 2. Find the refresh rates available for that resolution and select the
	# fastest refresh rate.
	refreshrate=$(printf "$monitoroptions\n" | grep "$resolution" \
		| grep -o "[0-9]\{1,3\}\.[0-9]\{1,2\}" | sort -rn | sed "1p;d")

	final_out+="--output $outp --mode $resolution --rate $refreshrate "
	if temp=$(echo "$outp" | grep "^$primary_outp"); then
		final_out+="--primary "
	else
		final_out+="--left-of $primary_outp "
	fi
done

# For debugging
echo "[$(date '+%F %T.%N')] $final_out" >> $logfile
echo "$final_out"
