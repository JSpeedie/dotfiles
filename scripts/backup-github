#!/usr/bin/env bash
#
# Takes 1 required, positional argument:
#
# 1. A string representing a path to a directory where all repositories will be
#    cloned into.
#
# This script also prompts the caller for keyboard input, asking them to
# provide a string representing a GitHub Personal Access Token (PAT). The PAT
# is necessary for this script to get a full list of a user's repositories,
# both private and public.
#
# This script then goes through the list of private and public repos and
# clones them one by one into the target directory.
#
# EXAMPLE:
#
# $ ./backup-github backup-dir/
#
# IMPORTANT:
#
# You can create a working directory from these `.tar.xz`'d, mirror'd clone by
# running the following commands:
#
# $ cd backup-dir/
# $ tar -xf cmp-tree.git.tar.xz
# $ cd
# $ git clone backup-dir/cmp-tree.git/ cmp-tree/
#
# You now have a working copy clone of the directory in `cmp-tree/`! This
# working copy should have access to everything that was on your remote
# including branches:
#
# $ cd cmp-tree/
# $ git branch -a
# $ git checkout remotes/origin/pipelined
#


# Parse the positional arguments given to the script
if [[ -n "$1" ]]; then
	if [[ -e "$1" ]]; then
		# Strip possible trailing "/"
		BACKUP_DIR=$(echo "$1" | sed "s/\/$//")
	else
		echo "Provided backup directory does not exist. Exiting..."
		exit 1
	fi
else
	echo "No arguments provided. Script expects 1 path to a directory. Exiting..."
	exit 1
fi


# This path will only be used once we `cd` into `$BACKUP_DIR`, so its real path
# is more like "$BACKUP_DIR/backup-github.log"
LOG_FILE="backup-github.log"


printf "This script requires a GitHub PAT to work. Please enter it now: "
read -a PAT_TOKEN
printf "\n"

CURL_RESPONSE=$(curl -s -H "Authorization: token $PAT_TOKEN" "https://api.github.com/user/repos?per_page=1000&type=owner")
if [[ $? -ne 0 ]]; then
	echo "Error: \`curl\` failed. Unable to get repo list. Exiting..." >&2
	exit 1
fi

NAMES=$(echo "$CURL_RESPONSE" | jq -r '.[].name')

SSH_URLS=$(echo "$CURL_RESPONSE" | jq -r '.[].ssh_url')
if [[ -z "$SSH_URLS" || "$SSH_URLS" == "null" ]]; then
	echo "Error: Couldn't parse any ssh urls from the \`curl\` response. Exiting..." >&2
	exit 1
fi

mapfile -t REPO_NAMES < <(echo "$NAMES")
mapfile -t REPO_LIST < <(echo "$SSH_URLS")

cd "${BACKUP_DIR}"
date "+%F %T.%N" >> "$LOG_FILE"

# While we have not yet compared all the files
for i in ${!REPO_LIST[@]}; do

	DIR_NAME="${REPO_NAMES[$i]}.git"
	TAR_NAME="${REPO_NAMES[$i]}.git.tar.xz"

	if [[ -e "$DIR_NAME" ]]; then
		echo -n "Warning: the directory \"$DIR_NAME\" already exists. \
Would you like to delete it so you can freshly clone the repository? \
[Y/n] (enter=Y): "
		read -a ANSWER
		printf "\n"
		# If the user wants to delete the directory
		if [[ "${ANSWER[*]}" == "Y" || "${ANSWER[*]}" == "" ]]; then
			rm -irf "$DIR_NAME"
		elif [[ "${ANSWER[*]}" == "n" ]]; then
			echo "User chose not to delete the directory. Continuing to next repository..."
			continue
		else
			echo "Invalid input. Continuing to next repository..."
			continue
		fi
	fi

	if [[ -e "$TAR_NAME" ]]; then
		echo -n "Warning: the archive \"$TAR_NAME\" already exists. \
Would you like to delete it so you can freshly clone the repository? \
[Y/n] (enter=Y): "
		read -a ANSWER
		printf "\n"
		# If the user wants to delete the archive
		if [[ "${ANSWER[*]}" == "Y" || "${ANSWER[*]}" == "" ]]; then
			rm -irf "$TAR_NAME"
		elif [[ "${ANSWER[*]}" == "n" ]]; then
			echo "User chose not to delete the archive. Continuing to next repository..."
			continue
		else
			echo "Invalid input. Continuing to next repository..."
			continue
		fi
	fi

	echo "[1/3] Cloning \"${REPO_NAMES[$i]}\" to \"$DIR_NAME\"..."
	git clone --mirror ${REPO_LIST[$i]} "$DIR_NAME" &>> "$LOG_FILE"

	echo "[2/3] Archiving \"$DIR_NAME\" as \"$TAR_NAME\"..."
	tar -cJf "$TAR_NAME" "$DIR_NAME" &>> "$LOG_FILE"

	echo "[3/3] Removing the directory the \"$DIR_NAME\"..."
	rm -irf "$DIR_NAME" &>> "$LOG_FILE"

	# Print a line marking that we have backed up the current repo
	echo "[*] ${REPO_NAMES[$i]}"
done
