#!/usr/bin/env bash
#
# Takes no arguments, prompts the user about what packages they want installed
# on their system, pulling from a series of lists specified in this file. The
# main purpose of this script is to install everything needed for my setup
# including packages for base functionality, my most commonly used apps,
# programs I use to build my setup, programs I use for development, and so on.
# This script has several versions, one for each distro I have used seriously.

red=$'\e[1;31m'
green=$'\e[1;32m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
magenta=$'\e[1;35m'
cyan=$'\e[1;36m'
end=$'\e[0m'

BASEPKGLIST=(alsa-utils lm_sensors rxvt-unicode xorg xorg-xinit \
	xorg-xrandr libnotify pulseaudio pamixer sxhkd \
	rsync cronie dialog wpa_supplicant arc-gtk-theme arc-icon-theme \
	xf86-video-intel flashplugin ntp pavucontrol)
APPPKGLIST=(firefox nautilus evince gimp libreoffice-fresh obs-studio eog vlc \
	mpv audacity ranger)
EXTRAPKGLIST=(rofi feh dunst scrot screenfetch easytags qt4 numlockx \
	network-manager network-manager-applet stalonetray xorg-xfd xorg-xfontsel \
	gnome-control-center lxappearance gst-libav pitivi veracrypt avidemux-qt \
	cmatrix asp figlet lolcat bless sl asciiquarium)
# jq bison
DEVPKGLIST=(tree gtop jq \
	vim neovim ctags \
	make cmake fakeroot pkgconfig \
	yay \
	git svn \
	valgrind gdb perf \
	pandoc texlive-core texlive-pictures \
	openssh \
	xterm \
	clang criterion lua-language-server \
	jre8-openjdk java-runtime-common java-environment-common \
	virtualbox-guest-utils \
	racket ghc ghc-static \
	autoconf automake \
	python python-pip \
	nodejs npm \
	ghex)
FONTPKGLIST=(ttf-dejavu ttf-droid adobe-source-code-pro-fonts ttf-roboto \
	noto-fonts)
FSPKGLIST=(dosfstools mtools ntfs-3g \
	mtp mtpfs gvfs-mtp \
	unzip zip unrar)
YPKGLIST=(compton lemonbar-xft-git tamzen-font-git siji-git ttf-meslo \
	flat-remix-gtk ttf-ms-fonts ttf-vista-fonts)
OYPKGLIST=(google-chrome-beta google-talkplugin sublime-text peaclock \
	virtualbox-ext-oracle)

ALL="f"


printf "$blue"
printf " ╔══════════════════════════════════════════════════════╗\n"
printf " ║                  1. Install Packages                 ║\n"
printf " ╚══════════════════════════════════════════════════════╝\n"
printf "              Script for: Arch-based Distros             \n"
printf "$end\n"

for i in $(printf "BASEPKGLIST\nAPPPKGLIST\nEXTRAPKGLIST\nDEVPKGLIST\nFONTPKGLIST\nFSPKGLIST\nYPKGLIST\nOYPKGLIST"); do
	if [[ $i == "BASEPKGLIST" ]]; then
		CPKGL=("${BASEPKGLIST[@]}")
	elif [[ $i == "APPPKGLIST" ]]; then
		CPKGL=("${APPPKGLIST[@]}")
	elif [[ $i == "EXTRAPKGLIST" ]]; then
		CPKGL=("${EXTRAPKGLIST[@]}")
	elif [[ $i == "DEVPKGLIST" ]]; then
		CPKGL=("${DEVPKGLIST[@]}")
	elif [[ $i == "FONTPKGLIST" ]]; then
		CPKGL=("${FONTPKGLIST[@]}")
	elif [[ $i == "FSPKGLIST" ]]; then
		CPKGL=("${FSPKGLIST[@]}")
	elif [[ $i == "YPKGLIST" ]]; then
		CPKGL=("${YPKGLIST[@]}")
	elif [[ $i == "OYPKGLIST" ]]; then
		CPKGL=("${OYPKGLIST[@]}")
	else
		continue
	fi

	if [[ $i == "YPKGLIST" || $i == "OYPKGLIST" ]]; then
		# Check if yay (AUR helper of choice) is installed {{{
		if pacman -Qq yay; then
			echo "${green}Found yay...${end}"
		else
			echo -n "Missing ${red}yay${end}. Would you like to install it? [Y/n] (enter=Y): "
			read -a AURHELPER
			printf "\n"

			# If the user wants to install yay
			if [[ ${AURHELPER[*]} == "" || ${AURHELPER[*]} == "Y" ]]; then
				# Check if the necessary packages for yay are installed
				if pacman -Qq git && pacman -Qq base-devel; then
					echo "${green}Found necessary dependencies for yay...${end}"
				else
					echo -n "Missing ${red}yay${end} dependencies (some of: ${red}git${end}, ${red}base-devel${end}). Would you like to install them? [Y/n] (enter=Y): "
					read -a AURHELPER
					printf "\n"

					# If the user wants to install the dependencies
					if [[ ${AURHELPER[*]} == "" || ${AURHELPER[*]} == "Y" ]]; then
						# Install the 2 dependencies
						sudo pacman -S --needed --noconfirm git base-devel
						if git clone https://aur.archlinux.org/yay.git yay; then
							cd yay
							makepkg -si
							cd ..
						else
							echo "${red}Failed to download yay. Cannot continue...${end}"
							exit 1
						fi
					# If the user does not want to install the dependencies
					else
						echo "Missing some of: ${red}git${end}, ${red}base-devel${end}. Cannot continue..."
						exit 1
					fi
				fi
			# If the user does not want to install yay.
			else
				echo "Missing ${red}yay${end}. Cannot continue..."
				exit 1
			fi
		fi
		# }}}
	fi

	if [[ $ALL != "t" ]]; then
		echo
		printf "${blue}Packages: (${CPKGL[*]})\n${end}"
		echo "Type any non-number/whitespace character(s) (besides \"skip\" to continue)"
		echo -n "${cyan}==> Enter n° of packages to be installed (ex: 1 2 3) " \
			"(enter=all, !=all of every package list)${end}: "
		read -a INPUT
		printf "\n"
		# If the user wants to install everything
		if [[ ${INPUT[*]} == "!" ]]; then
			ALL="t"
			INPUT=""
		fi
	fi

	# If the user just hits enter
	if [[ ${INPUT[*]} == "" ]]; then
		pkg=""
		num=1
		for n in ${CPKGL[*]}; do
			pkg+="$num "
			let num+=1
		done
		echo "Packages chosen: $pkg"
	# For if the user doesn't want to install anything from the collection
	elif [[ ${INPUT[*]} == "skip" ]]; then
		echo "Skipping to next collection of packages..."
		continue
	# If the user entered a white space delimited list of numbers
	elif [[ ${INPUT[*]} =~ ^([ \t]*[0-9]{1,}[ \t]*){1,}$ ]]; then
		pkg=${INPUT[*]}
		echo "Packages chosen: $pkg"
	# The user chose to exit by input "any non-number/whitespace
	# characters (besides "skip")"
	else
		echo "Invalid input. Exiting..."
		exit 1
	fi

	# TODO: make this execute one giant pacman command (and maybe one giant yay
	# command, if yay supports that) instead of doing sudo pacman -S vim,
	# sudo pacman -S gdb, sudo pacman -S firefox... etc. like the
	# packages-debian.sh script
	#
	# Go through the package list and install all the packages
	for j in $pkg; do
		if [[ $i == "YPKGLIST" ]] || [[ $i == "OYPKGLIST" ]]; then
			yay -S ${CPKGL[j-1]} --noconfirm
		else
			sudo pacman -S ${CPKGL[j-1]} --noconfirm --needed
		fi
	done
done
