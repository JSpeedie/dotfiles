#!/usr/bin/env bash
#
# Takes no arguments, prompts the user about what packages they want installed
# on their system, pulling from a series of lists specified in this file. The
# main purpose of this script is to install everything needed for my setup
# including packages for base functionality, my most commonly used apps,
# programs I use to build my setup, programs I use for development, and so on.
# This script has several versions, one for each distro I have used seriously.


red=$'\e[1;31m'
green=$'\e[1;32m'
yellow=$'\e[1;33m'
blue=$'\e[1;34m'
magenta=$'\e[1;35m'
cyan=$'\e[1;36m'
end=$'\e[0m'
bold=$(tput bold)
normal=$(tput sgr0)

BASEPKGLIST=(alacritty xorg libnotify4 pulseaudio pamixer sxhkd rsync \
	cron dialog pavucontrol picom)
APPPKGLIST=(firefox-esr nautilus evince gimp libreoffice obs-studio eog vlc \
	mpv audacity ranger pitivi gparted torbrowser-launcher)
# I think I'm done with lemonbar. Time to investigate maybe polybar or waybar
EXTRAPKGLIST=(wget rofi arandr feh dunst compton scrot screenfetch numlockx \
	network-manager lemonbar gnome-control-center lxappearance \
	cmatrix figlet lolcat sl imagemagick fzf exiftool img2pdf pdftk)
# 'linux-perf' for 'perf'
# 'sysstat' for 'iostat' and the like
DEVPKGLIST=(tree jq \
	vim neovim universal-ctags \
	make cmake fakeroot \
	git git-gui subversion \
	valgrind gdb linux-perf sysstat \
	pandoc texlive-full \
	openssh-client openssh-server \
	xterm \
	clang clangd libcriterion-dev \
	virtualbox virtualbox-ext-pack virtualbox-dkms virtualbox-guest-utils \
	autoconf automake \
	python3 python-is-python3 python3-pip \
	nodejs npm \
	ghex \
	usbutils \
	ffmpeg)
# racket ghc ghc-static \
#jre8-openjdk java-runtime-common java-environment-common \
FONTPKGLIST=(fonts-roboto fonts-noto)
FSPKGLIST=(dosfstools mtools ntfs-3g \
	unzip zip unrar)
ALL="f"


printf "$blue"
printf " ╔══════════════════════════════════════════════════════╗\n"
printf " ║                  1. Install Packages                 ║\n"
printf " ╚══════════════════════════════════════════════════════╝\n"
printf "                    Script for: Debian                   \n"
printf "$end\n"

# BASEPKGLIST
# APPPKGLIST
# EXTRAPKGLIST
# DEVPKGLIST
# FONTPKGLIST
# FSPKGLIST

PKGS_TO_INSTALL=()
MASTER_PKG_LIST=()

printf "Would you like to install ${bold}ALL${end} the packages? [Y/n] (enter=Y): "
read -a ANSWER
printf "\n"

# If the user wants to install all the packages specified in this script
if [[ "${ANSWER[*]}" == "Y" || "${ANSWER[*]}" == "" ]]; then
	# Create a master list of packages to be installed by concatenating all the
	# different package lists into one
	for i in $(seq 0 5); do
		if [[ "$i" == "0" ]]; then CPKGL=("${BASEPKGLIST[@]}")
		elif [[ "$i" == "1" ]]; then CPKGL=("${APPPKGLIST[@]}")
		elif [[ "$i" == "2" ]]; then CPKGL=("${EXTRAPKGLIST[@]}")
		elif [[ "$i" == "3" ]]; then CPKGL=("${DEVPKGLIST[@]}")
		elif [[ "$i" == "4" ]]; then CPKGL=("${FONTPKGLIST[@]}")
		elif [[ "$i" == "5" ]]; then CPKGL=("${FSPKGLIST[@]}")
		fi

		# Go through the current package list and append its packages to
		# the master package list
		for p in ${CPKGL[*]}; do
			MASTER_PKG_LIST+=("$p")
		done
	done

	echo
	printf "${blue}Packages: (${MASTER_PKG_LIST[*]})\n${end}"
	echo "Type any non-number/whitespace character(s) (besides \"skip\" to continue)"
	echo -n "${cyan}==> Enter the n° of the packages you want to install (ex: 1 2 3) (enter=all)${end}: "
	read -a INPUT
	printf "\n"

	custom_selection="f"

	# If the user just hits enter
	if [[ "${INPUT[*]}" == "" ]]; then
		# Construct a list (1 2 3 4 5 ...) that effectively selects every
		# package from the collection
		pkg=""
		num=1
		for n in ${MASTER_PKG_LIST[*]}; do
			pkg+="$num "
			let num+=1
		done
	# If the user changes their mind and decides not install the packages
	elif [[ "${INPUT[*]}" == "skip" ]]; then
		echo "Cancelling package installation process..."
		exit 1
	# If the user entered a white space delimited list of numbers
	elif [[ ${INPUT[*]} =~ ^([ \t]*[0-9]{1,}[ \t]*){1,}$ ]]; then
		pkg=${INPUT[*]}
		echo "Package indices chosen: $pkg"
		custom_selection="t"
	# If the user input invalid input
	else
		echo "Invalid input. Exiting..."
		exit 1
	fi

	# Go through the package numbers specified and create a list we can pass to
	# our package manager
	for j in $pkg; do
		PKGS_TO_INSTALL+=("${MASTER_PKG_LIST[j-1]}")
	done

	if [[ "$custom_selection" == "t" ]]; then
		echo "Packages chosen: ${bold}(${PKGS_TO_INSTALL[*]})${end}"
	fi

	sudo apt install --assume-yes ${PKGS_TO_INSTALL[*]}

	printf "\nPackage installation complete!\n"
elif [[ "${ANSWER[*]}" == "n" ]]; then
	for i in $(seq 0 5); do
		if [[ "$i" == "0" ]]; then CPKGL=("${BASEPKGLIST[@]}")
		elif [[ "$i" == "1" ]]; then CPKGL=("${APPPKGLIST[@]}")
		elif [[ "$i" == "2" ]]; then CPKGL=("${EXTRAPKGLIST[@]}")
		elif [[ "$i" == "3" ]]; then CPKGL=("${DEVPKGLIST[@]}")
		elif [[ "$i" == "4" ]]; then CPKGL=("${FONTPKGLIST[@]}")
		elif [[ "$i" == "5" ]]; then CPKGL=("${FSPKGLIST[@]}")
		else
			continue
		fi

		echo
		printf "${blue}Packages: (${CPKGL[*]})\n${end}"
		echo "Type any non-number/whitespace character(s) (besides \"skip\" to continue)"
		echo -n "${cyan}==> Enter the n° of the packages you want to install (ex: 1 2 3) (enter=all)${end}: "
		read -a INPUT
		printf "\n"

		custom_selection="f"

		# If the user just hits enter
		if [[ "${INPUT[*]}" == "" ]]; then
			# Construct a list (1 2 3 4 5 ...) that effectively selects every
			# package from the collection
			pkg=""
			num=1
			for n in ${CPKGL[*]}; do
				pkg+="$num "
				let num+=1
			done
		# If the user doesn't want to install anything from the collection
		elif [[ "${INPUT[*]}" == "skip" ]]; then
			echo "Skipping to next collection of packages..."
			continue
		# If the user entered a white space delimited list of numbers
		elif [[ ${INPUT[*]} =~ ^([ \t]*[0-9]{1,}[ \t]*){1,}$ ]]; then
			pkg=${INPUT[*]}
			echo "Package indices chosen: $pkg"
			custom_selection="t"
		# If the user input invalid input
		else
			echo "Invalid input. Exiting..."
			exit 1
		fi

		PKGS_TO_INSTALL=""

		# Go through the specified packages and create a list we can pass to
		# our package manager
		for j in $pkg; do
			PKGS_TO_INSTALL+=("${CPKGL[j-1]}")
		done

		echo "Packages chosen: ${bold}(${PKGS_TO_INSTALL[*]})${end}"

		sudo apt install --assume-yes ${PKGS_TO_INSTALL[*]}
	done

	printf "\nPackage installation complete!\n"
else
	echo "Invalid input. Exiting..."
	exit 1
fi

