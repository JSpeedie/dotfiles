set runtimepath+=~/.vim,~/.vim/after
set packpath+=~/.vim

"  :PlugInstall  to install a new addon
"  :PlugUpdate  to update all plugins
"      * If you use my configure.sh script, you may need to run this command.
"      * If you added a new plugin in the Plugins section of this file,
"          restart vim and then run this command to install it.

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Set how many lines of history vim must remember
set history=1500

" Set the custom colorscheme
colorscheme ayu
let ayucolor="light"  " light, mirage, dark
" Set the vim-airline theme
let g:airline_theme='ayu'

" Set the leader key to space
let mapleader=" "

" Disable the mouse, jeez
set mouse=

" Show line numbers
set number
" Make line numbers relative
set relativenumber

" TODO:
" Enables syntax highlighting
" syntax enable

" Updates the swap file if nothing is typed after x milliseconds
" I set it to 5 minutes
set updatetime=30000

" Display tabs as 4 spaces
set tabstop=4
" Set the auto indent (includes >>) width
set shiftwidth=4
" Each press of the tab key gives you a 4 space indent, which, if you
" set tabstop to the same value, gives you your full tab size
set softtabstop=4
" Use multiple of shiftwidth when indenting with '<' and '>'
set shiftround
" TODO:
" Makes coding much more comfortable as you no longer have to hit tab 5 times
" every time you open a new line
"set autoindent

" Show a few lines of context around the cursor after certain moves (affects
" H, L, zt, zb, /, etc.)
set scrolloff=3

" Have a block cursor instead of a line cursor when in insert mode
set guicursor = ""

" Don't highlight search results
set nohlsearch
" Highlight the nearest result for your search as you type it (default is to
" not highlight anything at all in the code as you construct your search)
set incsearch

" Don't wrap lines when displaying them on windows that aren't wide enough
set nowrap

" Set folding style (so you can use {{{ and }}} to make folds)
set foldmethod=marker

" Highlight the cursor line
set cursorline
" Set default column line at the 80th character for code style stuff. This
" should ideally change based on the type of file, but this is the default if
" no rule is set for the currently open file type.
set colorcolumn=80
" Set a line at the 100th character for Rust (following the formatting
" conventions specified in The Book)
autocmd FileType rust setlocal colorcolumn=100
" Set a line at the 79th character for C (following PEP7 and GNU's standards)
autocmd FileType c setlocal colorcolumn=79
" Set a line at the 100th character for java (checkstyle)
autocmd FileType java setlocal colorcolumn=100
" Set a line at the 100th character for html and php
autocmd FileType html setlocal colorcolumn=100
autocmd FileType php setlocal colorcolumn=100

" When creating verical splits (:vsplit), put the new window on the right
set splitright
" When creating horizontal splits (:split), put the new window below
set splitbelow

" Mark whitespace characters with specific symbols to make them easier to see
set list
set listchars=tab:\|\ ,eol:$,space:·,extends:⟩,precedes:⟨

" Awesome setting to always jump to the last known cursor position when
" reopening a file.
" Note: Only do this part when Vim was compiled with the +eval feature.
if 1
	" Put these in an autocmd group, so that you can revert them with:
	" ":augroup vimStartup | exe 'au!' | augroup END"
	augroup vimStartup
		au!

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid, when inside an event handler
		" (happens when dropping a file on gvim) and for a commit message (it's
		" likely a different one than last time).
		autocmd BufReadPost *
			\ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
			\ |	 exe "normal! g`\""
			\ | endif

	augroup END
endif

" Regexes that highlight trailing whitespace {{{
"
" The problem with these regexes is they are slow and you can see your
" terminal flicker sometimes on start up.
"
" Explanation on how they work:
"   \\ matches a '\'. Used for matching an escaped or non escaped whitespace char
"   \@<! NOT anything before this atom. For example, NOT \ (non escaped)
"   \zs anything before this atom. For example, \ (escaped)
"   \s\+ matches one or more whitespace chars
"   \%# vim atom for cursor position
"   \@<! NOT anything before this atom. For example, NOT \%# (not cursor position)
"   $ matches the end of a line
" }}}

" Matches trailing whitespace that is not escaped and not at the cursor
" call matchadd('Error', '\\\@<!\s\+\%#\@<!$')
" Matches an escaped whitespace character that is not at the cursor
" call matchadd('Visual', '\\\zs\s\%#\@<!$')

""""""""""""""""""""
"     Plugins      "
""""""""""""""""""""
" {{{

" Init Plugin manager
" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Colour Scheme of choice (Despacio)
""""""""""""""""""""""""""""""""""""
Plug 'AlessandroYorba/Despacio'
Plug 'ayu-theme/ayu-vim'

" Conquer of Completion (COC) (For autocompletion)
""""""""""""""""""""""""""""""""""""""""""""""""""
" - Requires 'npm'
" Use release branch (Recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Or build from source code by use yarn: https://yarnpkg.com
" Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}

" vim-commentary (for commenting with gc)
"""""""""""""""""""""""""""""""""""""""""
" - E.g. gcc comments out a line
" - E.g. you can select multiple lines with V, then comment them out with gcc
Plug 'tpope/vim-commentary'

" vim-surround (for surrounding with cs)
"""""""""""""""""""""""""""""""""""""""""
" - E.g. while inside '[hello]' cs[) will give you '(hello)':
"       [hello]
" - E.g. while inside a word 'hello', ysiw" will give you \"hello\":
"       hello
" - E.g. while inside a word 'hello', ysiw<em> will give you <em>hello</em>:
"       hello
" - Works with HTML tags, with 't' for tags. E.g. while inside <q>hi</q>, cst"
"   will give you \"hi\":
"       <q>hi</q>
" - yss to surround a line.
Plug 'tpope/vim-surround'

" vim-gitgutter (showing which lines have been changed next to the line numbers)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plug 'airblade/vim-gitgutter'

" vim-devicons (for file format icons in NERDTree)
""""""""""""""""""""""""""""""""""""""""""""""""""
" This plugin requires a nerd font to be installed.
"     'yay nerd-fonts-source-code-pro', for instance.
Plug 'ryanoasis/vim-devicons'

" vim-airline (for an informative status bar)
"""""""""""""""""""""""""""""""""""""""""""""
Plug 'vim-airline/vim-airline'
" For theming the status bar
Plug 'vim-airline/vim-airline-themes'

" End Plugin manager
call plug#end()

" }}}
"
""""""""""""""""""""
"    COC Config    "
""""""""""""""""""""
" {{{

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" " Use tab for trigger completion with characters ahead and navigate.
" " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<C-n>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

" ?
" function! s:check_back_space() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

" " Use <c-space> to trigger completion.
" inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
" inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" " Remap for rename current word
" nmap <leader>rn <Plug>(coc-rename)

" " Remap for format selected region
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

" augroup mygroup
"   autocmd!
"   " Setup formatexpr specified filetype(s).
"   autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
"   " Update signature help on jump placeholder
"   autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
" augroup end

" " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" " Remap for do codeAction of current line
" nmap <leader>ac  <Plug>(coc-codeaction)
" " Fix autofix problem of current line
" nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

" }}}

" vim-devicons config
"""""""""""""""""""""
set encoding=UTF-8
